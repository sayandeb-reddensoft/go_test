name: Deploy CDC Auth Server On Production

on:
  push:
    branches:
      - main
    tags:
      - "v*.*.*"
    paths-ignore:
      - "**/*.md"
      - ".github/workflows/*"
      - "*/*.txt"

  workflow_dispatch:
    inputs:
      environment:
        description: "Deploy On Production Environment"
        required: true
        default: production

jobs:
  test:
    runs-on: ubuntu-latest
    environment: ${{ inputs.environment }}
    outputs:
      release_version: ${{ steps.set_release_version.outputs.release_version }}
    steps:
      - uses: actions/checkout@v4

      - name: Set Release Version
        id: set_release_version
        run: |
          REF="${GITHUB_REF:-${GITHUB_EVENT_REF}}"
          echo "REF is ${REF}"
          if [[ "${REF}" == refs/tags/* ]]; then
            echo "release_version=${REF#refs/tags/}" >> $GITHUB_OUTPUT
          else
            echo "release_version=" >> $GITHUB_OUTPUT
          fi

      - name: Print RELEASE_VERSION
        run: echo "RELEASE_VERSION is ${{ steps.set_release_version.outputs.release_version }}"

      - uses: actions/setup-go@v5
        with:
          go-version: "1.24"

      - name: Cache Go Modules
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: go-${{ runner.os }}-${{ hashFiles('**/go.sum') }}
          restore-keys: go-${{ runner.os }}-

      - name: Mask secrets
        run: |
          echo "::add-mask::${{ secrets.RELATIONAL_DB_USER }}"
          echo "::add-mask::${{ secrets.RELATIONAL_DB_PASSWORD }}"
          echo "::add-mask::${{ secrets.RELATIONAL_DB_NAME }}"
          echo "::add-mask::${{ secrets.MAIL_USERNAME }}"
          echo "::add-mask::${{ secrets.MAIL_PASSWORD }}"
          echo "::add-mask::${{ secrets.MAIL_HOST }}"
          echo "::add-mask::${{ secrets.PUBLIC_PEM }}"
          echo "::add-mask::${{ secrets.PRIVATE_PEM }}"
          echo "::add-mask::${{ secrets.DEVELOPMENT }}"

      - name: Add required secrets
        run: |
          {
            echo "RELATIONAL_DB_USER=${{ secrets.RELATIONAL_DB_USER }}"
            echo "RELATIONAL_DB_PASSWORD=${{ secrets.RELATIONAL_DB_PASSWORD }}"
            echo "RELATIONAL_DB_NAME=${{ secrets.RELATIONAL_DB_NAME }}"
            echo "MAIL_USERNAME=${{ secrets.MAIL_USERNAME }}"
            echo "MAIL_PASSWORD=${{ secrets.MAIL_PASSWORD }}"
            echo "MAIL_HOST=${{ secrets.MAIL_HOST }}"
            echo "PUBLIC_PEM=${{ secrets.PUBLIC_PEM }}"
            echo "PRIVATE_PEM=${{ secrets.PRIVATE_PEM }}"
            echo "DEVELOPMENT=${{ secrets.DEVELOPMENT }}"
          } > .env

      - name: Add required vars for tests
        run: |
          mkdir -p tests
          cat <<EOF > tests/.env.test
          ${{ vars.ENV_TEST_VARIABLES }}
          EOF
          cat .env >> tests/.env.test

      - name: Format and fix
        run: |
          FILES=$(gofmt -l .)
          if [ -n "$FILES" ]; then
            echo "The following files were not gofmt'd. Auto-fixing them:"
            echo "$FILES"
            gofmt -w .
          else
            echo "All files are properly formatted."
          fi

      - name: Start dependencies with Docker Compose
        run: |
          docker compose -f docker-compose.test.yml up -d
          sleep 15

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v3
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_PUBLISH_REGION }}

      - name: Install gotestsum for format printing test result
        run: go install gotest.tools/gotestsum@latest

      - name: Run Tests
        run: gotestsum --format standard-verbose -- ./tests/...

      - name: Install govulncheck
        run: go install golang.org/x/vuln/cmd/govulncheck@latest

      - name: Run Vulnerability Scan
        run: |
          echo "Running vulnerability scan..."
          govulncheck ./...

  build:
    needs: test
    outputs:
      release_version: ${{ needs.test.outputs.release_version }}
      short_sha: ${{ steps.set_vars.outputs.short_sha }}
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-go@v5
        with:
          go-version: "1.24"

      - name: Cache Go Modules
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: go-${{ runner.os }}-${{ hashFiles('**/go.sum') }}
          restore-keys: go-${{ runner.os }}-

      - name: Print Release Version
        run: echo "Release version:${{ needs.test.outputs.release_version }}"

      - name: Build Binary
        run: |
          mkdir -p dist
          GOOS=linux GOARCH=amd64 go build -o dist/bootstrap main.go

      - name: Create Zip Archive
        run: zip -j dist/app.zip dist/bootstrap

      - name: Compute SHA256
        run: sha256sum dist/bootstrap > dist/checksum.txt

      - name: Set Vars
        id: set_vars
        run: echo "short_sha=$(git rev-parse --short HEAD)" >> $GITHUB_OUTPUT

      - name: Upload Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: release-artifacts
          path: |
            dist/bootstrap
            dist/app.zip
            dist/checksum.txt

  release:
    needs: build
    outputs:
      version: ${{ steps.create_release.outputs.version }}
      release_version: ${{ needs.build.outputs.release_version }}
      short_sha: ${{ needs.build.outputs.short_sha }}
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Download Artifacts
        uses: actions/download-artifact@v4
        with:
          name: release-artifacts
          path: dist/

      - name: Extract Version from Git Tag
        id: extract_version
        run: |
          VERSION="${{ needs.build.outputs.release_version }}"
          VERSION_NO_V="${VERSION#v}"
          echo "version=$VERSION_NO_V" >> $GITHUB_OUTPUT
          echo "full_version=$VERSION" >> $GITHUB_OUTPUT

      - name: Create GitHub Release
        if: ${{ !env.ACT }}
        id: create_release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ steps.extract_version.outputs.full_version }}
          name: Release ${{ steps.extract_version.outputs.full_version }}
          files: |
            dist/app.zip
            dist/checksum.txt
        env:
          GITHUB_TOKEN: ${{ secrets.WORKFLOW_DOCKER_TOKEN }}

  artifact:
    needs: release
    env:
      RELEASE_VERSION: ${{ needs.release.outputs.release_version }}
    outputs:
      release_version: ${{ needs.release.outputs.release_version }}
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - uses: docker/setup-buildx-action@v3

      - uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.WORKFLOW_DOCKER_TOKEN }}

      - name: Set Vars
        run: |
          SHA=${{ needs.release.outputs.short_sha }}
          REPO_LC=${GITHUB_REPOSITORY,,}
          echo "SHA=${SHA}" >> $GITHUB_ENV
          echo "REPO_LC=${REPO_LC}" >> $GITHUB_ENV

      - name: Build & Push
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: |
            ghcr.io/${{ env.REPO_LC }}:latest
            ghcr.io/${{ env.REPO_LC }}:${{ env.RELEASE_VERSION }}
            ghcr.io/${{ env.REPO_LC }}:sha-${{ env.SHA }}

  deploy:
    needs: artifact
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read
    steps:
      - uses: actions/checkout@v4

      - uses: aws-actions/configure-aws-credentials@v2
        with:
          role-to-assume: ${{ secrets.AWS_RUNNER_ROLE }}
          aws-region: ${{ secrets.AWS_PUBLISH_REGION }}

      - name: Download Artifacts
        uses: actions/download-artifact@v4
        with:
          name: release-artifacts
          path: dist/

      - name: Update Lambda Code
        run: |
          aws lambda update-function-code \
            --function-name ${{ secrets.LAMBDA_FUNCTION_NAME }} \
            --zip-file fileb://dist/app.zip

      - name: Publish New Version
        id: publish_version
        run: |
          RELEASE_VERSION=$(aws lambda publish-version --function-name ${{ secrets.LAMBDA_FUNCTION_NAME }} --output text --query Version)
          echo "RELEASE_VERSION=$RELEASE_VERSION" >> $GITHUB_ENV

      - name: Create or update version alias
        run: |
          VERSION_ALIAS="v${{ needs.artifact.outputs.release_version }}"
          aws lambda update-alias \
          --function-name ${{ secrets.LAMBDA_FUNCTION_NAME }} \
          --name $VERSION_ALIAS \
          --function-version ${{ env.RELEASE_VERSION }}
